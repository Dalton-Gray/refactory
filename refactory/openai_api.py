# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_openai_api.ipynb.

# %% auto 0
__all__ = ['load_api_key', 'openai_chat', 'openai_edit', 'write_file', 'read_file']

# %% ../nbs/00_openai_api.ipynb 4
import openai
import os 
from dotenv import load_dotenv
from pathlib import Path

# %% ../nbs/00_openai_api.ipynb 5
def load_api_key(path:str = '../../.env') -> str:
    dotenv_path = Path(path)
    load_dotenv(dotenv_path)
    API_KEY = os.getenv('API_KEY')  
    return API_KEY

# %% ../nbs/00_openai_api.ipynb 6
# each dict contains two key value pairs
# 1. "role" : value
# 2. "content": value
# You can add additional dics in this format to increase the length of the message histroy
# example prompt: Rewrite this code using pandas vectorization. Respond only with Python code. No explanation or words'
def openai_chat(prompt:str, file_content:str, model:str = 'gpt-3.5-turbo') -> dict:
    response = openai.ChatCompletion.create(
        model=model,
        messages=[
            {"role": "user",
            "content": f'{file_content} {prompt}'},
        ])
    return response

# %% ../nbs/00_openai_api.ipynb 7
def openai_edit(prompt:str, file_content:str, model:str = 'code-davinci-edit-001') -> dict:
    response = openai.Edit.create(model=model,
                                 input= file_content,
                                 instruction = prompt)
    return response

# %% ../nbs/00_openai_api.ipynb 8
def write_file(in_str, out_path) -> None:
    with open(out_path, 'w') as python_file:
        python_file.write(in_str)

def read_file(file_path) -> str:
    with open(file_path) as str_file:
        str_file = str_file.read()
    return str_file
